syntax = "proto3";

option go_package = "./proto";

message AckPacket {}

message Position {
	float x = 1;
	float y = 2;
	float heading = 3;
}

message PongPacket {}

message SensorPacket {
	float left = 1;
	float front = 2;
	float right = 3;
}

message NavigationPacket {
	SensorPacket sensors = 1;
	Position position = 2;
	float leftMotorSpeed = 3;
	float rightMotorSpeed = 4;
	int32 leftEncoderTotal = 5;
	int32 rightEncoderTotal = 6;
	float voltage = 7;
	float batPercentage = 8;
	uint32 timestamp = 9;
}

enum InfoCmdType {
	Drive = 0;
	TurnLeft = 1;
	TurnRight = 2;
	Stop = 3;

	// commands only intended for the go<->client communication
	Connected = 100;
	MausConnected = 101;
	MausDisconnected = 102;
}

message InfoPacket {
	InfoCmdType cmd = 1;
}

message PidTuningInfo {
	repeated float err = 1;
}

message MausOutgoingMessage {
	oneof payload {
		AckPacket ack = 1;
		NavigationPacket nav = 2;
		PongPacket pong = 3;
		InfoPacket info = 4;
		PidTuningInfo pidTuning = 5;
	}
}

// command indicates remote client connection
message MsgInit {
	int32 version = 1;
}

message MsgPing {}

message MsgControl {
	float direction = 1;
	int32 speed = 2;
}

message MsgTurn {
	float degree = 1;
	int32 speed = 2;
}

message MsgDrive {
	int32 distance = 1;
	int32 speed = 2;
}

message MsgStop {}

message MsgEncoderCallibration {
	float kP = 1;
	float kI = 2;
	float kD = 3;
	bool streamData = 4;
}

message MausIncomingMessage {
	oneof payload {
		MsgInit init = 2;
		MsgControl control = 3;
		MsgEncoderCallibration encoderCallibration = 4;
		MsgPing ping = 5;
		MsgTurn turn = 6;
		MsgStop stop = 7;
		MsgDrive drive = 8;
	}
}