// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: message.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MotorPosition int32

const (
	MotorPosition_left  MotorPosition = 0
	MotorPosition_right MotorPosition = 1
)

// Enum value maps for MotorPosition.
var (
	MotorPosition_name = map[int32]string{
		0: "left",
		1: "right",
	}
	MotorPosition_value = map[string]int32{
		"left":  0,
		"right": 1,
	}
)

func (x MotorPosition) Enum() *MotorPosition {
	p := new(MotorPosition)
	*p = x
	return p
}

func (x MotorPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MotorPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (MotorPosition) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x MotorPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MotorPosition.Descriptor instead.
func (MotorPosition) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type InfoCmdType int32

const (
	InfoCmdType_Noop InfoCmdType = 0
	// commands only intended for the go<->client communication
	InfoCmdType_Connected        InfoCmdType = 100
	InfoCmdType_MausConnected    InfoCmdType = 101
	InfoCmdType_MausDisconnected InfoCmdType = 102
)

// Enum value maps for InfoCmdType.
var (
	InfoCmdType_name = map[int32]string{
		0:   "Noop",
		100: "Connected",
		101: "MausConnected",
		102: "MausDisconnected",
	}
	InfoCmdType_value = map[string]int32{
		"Noop":             0,
		"Connected":        100,
		"MausConnected":    101,
		"MausDisconnected": 102,
	}
)

func (x InfoCmdType) Enum() *InfoCmdType {
	p := new(InfoCmdType)
	*p = x
	return p
}

func (x InfoCmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InfoCmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (InfoCmdType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x InfoCmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InfoCmdType.Descriptor instead.
func (InfoCmdType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

type DriveCmdType int32

const (
	DriveCmdType_Move                DriveCmdType = 0
	DriveCmdType_MoveCells           DriveCmdType = 1
	DriveCmdType_TurnAround          DriveCmdType = 2
	DriveCmdType_TurnLeft            DriveCmdType = 3
	DriveCmdType_TurnRight           DriveCmdType = 4
	DriveCmdType_TurnLeftOnSpot      DriveCmdType = 5
	DriveCmdType_TurnRightOnSpot     DriveCmdType = 6
	DriveCmdType_StartMazeNavigation DriveCmdType = 7
	DriveCmdType_Stop                DriveCmdType = 8
)

// Enum value maps for DriveCmdType.
var (
	DriveCmdType_name = map[int32]string{
		0: "Move",
		1: "MoveCells",
		2: "TurnAround",
		3: "TurnLeft",
		4: "TurnRight",
		5: "TurnLeftOnSpot",
		6: "TurnRightOnSpot",
		7: "StartMazeNavigation",
		8: "Stop",
	}
	DriveCmdType_value = map[string]int32{
		"Move":                0,
		"MoveCells":           1,
		"TurnAround":          2,
		"TurnLeft":            3,
		"TurnRight":           4,
		"TurnLeftOnSpot":      5,
		"TurnRightOnSpot":     6,
		"StartMazeNavigation": 7,
		"Stop":                8,
	}
)

func (x DriveCmdType) Enum() *DriveCmdType {
	p := new(DriveCmdType)
	*p = x
	return p
}

func (x DriveCmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriveCmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[2].Descriptor()
}

func (DriveCmdType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[2]
}

func (x DriveCmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriveCmdType.Descriptor instead.
func (DriveCmdType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

type SolveCmdType int32

const (
	SolveCmdType_Explore SolveCmdType = 0
	SolveCmdType_GoHome  SolveCmdType = 1
	SolveCmdType_FastRun SolveCmdType = 2
)

// Enum value maps for SolveCmdType.
var (
	SolveCmdType_name = map[int32]string{
		0: "Explore",
		1: "GoHome",
		2: "FastRun",
	}
	SolveCmdType_value = map[string]int32{
		"Explore": 0,
		"GoHome":  1,
		"FastRun": 2,
	}
)

func (x SolveCmdType) Enum() *SolveCmdType {
	p := new(SolveCmdType)
	*p = x
	return p
}

func (x SolveCmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolveCmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[3].Descriptor()
}

func (SolveCmdType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[3]
}

func (x SolveCmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolveCmdType.Descriptor instead.
func (SolveCmdType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

type AckPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckPacket) Reset() {
	*x = AckPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckPacket) ProtoMessage() {}

func (x *AckPacket) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckPacket.ProtoReflect.Descriptor instead.
func (*AckPacket) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y       float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Heading float32 `protobuf:"fixed32,3,opt,name=heading,proto3" json:"heading,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Position) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

type MsgMotorCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Motor  MotorPosition           `protobuf:"varint,1,opt,name=motor,proto3,enum=MotorPosition" json:"motor,omitempty"`
	Config *MsgEncoderCalibration `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *MsgMotorCalibration) Reset() {
	*x = MsgMotorCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgMotorCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgMotorCalibration) ProtoMessage() {}

func (x *MsgMotorCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgMotorCalibration.ProtoReflect.Descriptor instead.
func (*MsgMotorCalibration) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *MsgMotorCalibration) GetMotor() MotorPosition {
	if x != nil {
		return x.Motor
	}
	return MotorPosition_left
}

func (x *MsgMotorCalibration) GetConfig() *MsgEncoderCalibration {
	if x != nil {
		return x.Config
	}
	return nil
}

type MsgEncoderCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KP         float32 `protobuf:"fixed32,1,opt,name=kP,proto3" json:"kP,omitempty"`
	KI         float32 `protobuf:"fixed32,2,opt,name=kI,proto3" json:"kI,omitempty"`
	KD         float32 `protobuf:"fixed32,3,opt,name=kD,proto3" json:"kD,omitempty"`
	StreamData bool    `protobuf:"varint,4,opt,name=streamData,proto3" json:"streamData,omitempty"`
}

func (x *MsgEncoderCalibration) Reset() {
	*x = MsgEncoderCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgEncoderCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgEncoderCalibration) ProtoMessage() {}

func (x *MsgEncoderCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgEncoderCalibration.ProtoReflect.Descriptor instead.
func (*MsgEncoderCalibration) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *MsgEncoderCalibration) GetKP() float32 {
	if x != nil {
		return x.KP
	}
	return 0
}

func (x *MsgEncoderCalibration) GetKI() float32 {
	if x != nil {
		return x.KI
	}
	return 0
}

func (x *MsgEncoderCalibration) GetKD() float32 {
	if x != nil {
		return x.KD
	}
	return 0
}

func (x *MsgEncoderCalibration) GetStreamData() bool {
	if x != nil {
		return x.StreamData
	}
	return false
}

type PongPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PongPacket) Reset() {
	*x = PongPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PongPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PongPacket) ProtoMessage() {}

func (x *PongPacket) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PongPacket.ProtoReflect.Descriptor instead.
func (*PongPacket) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

type SensorPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  float32 `protobuf:"fixed32,1,opt,name=left,proto3" json:"left,omitempty"`
	Front float32 `protobuf:"fixed32,2,opt,name=front,proto3" json:"front,omitempty"`
	Right float32 `protobuf:"fixed32,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *SensorPacket) Reset() {
	*x = SensorPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorPacket) ProtoMessage() {}

func (x *SensorPacket) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorPacket.ProtoReflect.Descriptor instead.
func (*SensorPacket) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *SensorPacket) GetLeft() float32 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *SensorPacket) GetFront() float32 {
	if x != nil {
		return x.Front
	}
	return 0
}

func (x *SensorPacket) GetRight() float32 {
	if x != nil {
		return x.Right
	}
	return 0
}

type PosDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionMean []float32 `protobuf:"fixed32,1,rep,packed,name=positionMean,proto3" json:"positionMean,omitempty"`
	VelocityMean []float32 `protobuf:"fixed32,2,rep,packed,name=velocityMean,proto3" json:"velocityMean,omitempty"`
	PositionStd  []float32 `protobuf:"fixed32,3,rep,packed,name=positionStd,proto3" json:"positionStd,omitempty"`
	VelocityStd  []float32 `protobuf:"fixed32,4,rep,packed,name=velocityStd,proto3" json:"velocityStd,omitempty"`
}

func (x *PosDistribution) Reset() {
	*x = PosDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosDistribution) ProtoMessage() {}

func (x *PosDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosDistribution.ProtoReflect.Descriptor instead.
func (*PosDistribution) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *PosDistribution) GetPositionMean() []float32 {
	if x != nil {
		return x.PositionMean
	}
	return nil
}

func (x *PosDistribution) GetVelocityMean() []float32 {
	if x != nil {
		return x.VelocityMean
	}
	return nil
}

func (x *PosDistribution) GetPositionStd() []float32 {
	if x != nil {
		return x.PositionStd
	}
	return nil
}

func (x *PosDistribution) GetVelocityStd() []float32 {
	if x != nil {
		return x.VelocityStd
	}
	return nil
}

type NavigationPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors           *SensorPacket    `protobuf:"bytes,1,opt,name=sensors,proto3" json:"sensors,omitempty"`
	Position          *Position        `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	LeftMotorSpeed    float32          `protobuf:"fixed32,3,opt,name=leftMotorSpeed,proto3" json:"leftMotorSpeed,omitempty"`
	RightMotorSpeed   float32          `protobuf:"fixed32,4,opt,name=rightMotorSpeed,proto3" json:"rightMotorSpeed,omitempty"`
	LeftEncoderTotal  int32            `protobuf:"varint,5,opt,name=leftEncoderTotal,proto3" json:"leftEncoderTotal,omitempty"`
	RightEncoderTotal int32            `protobuf:"varint,6,opt,name=rightEncoderTotal,proto3" json:"rightEncoderTotal,omitempty"`
	Voltage           float32          `protobuf:"fixed32,7,opt,name=voltage,proto3" json:"voltage,omitempty"`
	BatPercentage     float32          `protobuf:"fixed32,8,opt,name=batPercentage,proto3" json:"batPercentage,omitempty"`
	Timestamp         uint32           `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PosDistribution   *PosDistribution `protobuf:"bytes,10,opt,name=posDistribution,proto3" json:"posDistribution,omitempty"`
}

func (x *NavigationPacket) Reset() {
	*x = NavigationPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationPacket) ProtoMessage() {}

func (x *NavigationPacket) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationPacket.ProtoReflect.Descriptor instead.
func (*NavigationPacket) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *NavigationPacket) GetSensors() *SensorPacket {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *NavigationPacket) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *NavigationPacket) GetLeftMotorSpeed() float32 {
	if x != nil {
		return x.LeftMotorSpeed
	}
	return 0
}

func (x *NavigationPacket) GetRightMotorSpeed() float32 {
	if x != nil {
		return x.RightMotorSpeed
	}
	return 0
}

func (x *NavigationPacket) GetLeftEncoderTotal() int32 {
	if x != nil {
		return x.LeftEncoderTotal
	}
	return 0
}

func (x *NavigationPacket) GetRightEncoderTotal() int32 {
	if x != nil {
		return x.RightEncoderTotal
	}
	return 0
}

func (x *NavigationPacket) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *NavigationPacket) GetBatPercentage() float32 {
	if x != nil {
		return x.BatPercentage
	}
	return 0
}

func (x *NavigationPacket) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NavigationPacket) GetPosDistribution() *PosDistribution {
	if x != nil {
		return x.PosDistribution
	}
	return nil
}

type InfoPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd InfoCmdType `protobuf:"varint,1,opt,name=cmd,proto3,enum=InfoCmdType" json:"cmd,omitempty"`
}

func (x *InfoPacket) Reset() {
	*x = InfoPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoPacket) ProtoMessage() {}

func (x *InfoPacket) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoPacket.ProtoReflect.Descriptor instead.
func (*InfoPacket) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *InfoPacket) GetCmd() InfoCmdType {
	if x != nil {
		return x.Cmd
	}
	return InfoCmdType_Noop
}

type PidTuningInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err []float32 `protobuf:"fixed32,1,rep,packed,name=err,proto3" json:"err,omitempty"`
}

func (x *PidTuningInfo) Reset() {
	*x = PidTuningInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PidTuningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PidTuningInfo) ProtoMessage() {}

func (x *PidTuningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PidTuningInfo.ProtoReflect.Descriptor instead.
func (*PidTuningInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *PidTuningInfo) GetErr() []float32 {
	if x != nil {
		return x.Err
	}
	return nil
}

type MazeStatePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    []byte    `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Walls    []byte    `protobuf:"bytes,2,opt,name=walls,proto3" json:"walls,omitempty"`
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Target   *Position `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *MazeStatePacket) Reset() {
	*x = MazeStatePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MazeStatePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MazeStatePacket) ProtoMessage() {}

func (x *MazeStatePacket) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MazeStatePacket.ProtoReflect.Descriptor instead.
func (*MazeStatePacket) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *MazeStatePacket) GetState() []byte {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *MazeStatePacket) GetWalls() []byte {
	if x != nil {
		return x.Walls
	}
	return nil
}

func (x *MazeStatePacket) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *MazeStatePacket) GetTarget() *Position {
	if x != nil {
		return x.Target
	}
	return nil
}

type MausConfigPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftMotorPid  *MsgEncoderCalibration `protobuf:"bytes,1,opt,name=leftMotorPid,proto3" json:"leftMotorPid,omitempty"`
	RightMotorPid *MsgEncoderCalibration `protobuf:"bytes,2,opt,name=rightMotorPid,proto3" json:"rightMotorPid,omitempty"`
	LanePid       *MsgEncoderCalibration `protobuf:"bytes,3,opt,name=lanePid,proto3" json:"lanePid,omitempty"`
}

func (x *MausConfigPacket) Reset() {
	*x = MausConfigPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MausConfigPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MausConfigPacket) ProtoMessage() {}

func (x *MausConfigPacket) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MausConfigPacket.ProtoReflect.Descriptor instead.
func (*MausConfigPacket) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *MausConfigPacket) GetLeftMotorPid() *MsgEncoderCalibration {
	if x != nil {
		return x.LeftMotorPid
	}
	return nil
}

func (x *MausConfigPacket) GetRightMotorPid() *MsgEncoderCalibration {
	if x != nil {
		return x.RightMotorPid
	}
	return nil
}

func (x *MausConfigPacket) GetLanePid() *MsgEncoderCalibration {
	if x != nil {
		return x.LanePid
	}
	return nil
}

type MausCommandStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     DriveCmdType `protobuf:"varint,1,opt,name=cmd,proto3,enum=DriveCmdType" json:"cmd,omitempty"`
	Success bool         `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Target  uint32       `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`
	Actual  uint32       `protobuf:"varint,4,opt,name=actual,proto3" json:"actual,omitempty"`
}

func (x *MausCommandStatus) Reset() {
	*x = MausCommandStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MausCommandStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MausCommandStatus) ProtoMessage() {}

func (x *MausCommandStatus) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MausCommandStatus.ProtoReflect.Descriptor instead.
func (*MausCommandStatus) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *MausCommandStatus) GetCmd() DriveCmdType {
	if x != nil {
		return x.Cmd
	}
	return DriveCmdType_Move
}

func (x *MausCommandStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MausCommandStatus) GetTarget() uint32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *MausCommandStatus) GetActual() uint32 {
	if x != nil {
		return x.Actual
	}
	return 0
}

type MausOutgoingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*MausOutgoingMessage_Ack
	//	*MausOutgoingMessage_Nav
	//	*MausOutgoingMessage_Pong
	//	*MausOutgoingMessage_Info
	//	*MausOutgoingMessage_PidTuning
	//	*MausOutgoingMessage_MazeState
	//	*MausOutgoingMessage_MausConfig
	//	*MausOutgoingMessage_MausCommandStatus
	Payload isMausOutgoingMessage_Payload `protobuf_oneof:"payload"`
}

func (x *MausOutgoingMessage) Reset() {
	*x = MausOutgoingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MausOutgoingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MausOutgoingMessage) ProtoMessage() {}

func (x *MausOutgoingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MausOutgoingMessage.ProtoReflect.Descriptor instead.
func (*MausOutgoingMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (m *MausOutgoingMessage) GetPayload() isMausOutgoingMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *MausOutgoingMessage) GetAck() *AckPacket {
	if x, ok := x.GetPayload().(*MausOutgoingMessage_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *MausOutgoingMessage) GetNav() *NavigationPacket {
	if x, ok := x.GetPayload().(*MausOutgoingMessage_Nav); ok {
		return x.Nav
	}
	return nil
}

func (x *MausOutgoingMessage) GetPong() *PongPacket {
	if x, ok := x.GetPayload().(*MausOutgoingMessage_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *MausOutgoingMessage) GetInfo() *InfoPacket {
	if x, ok := x.GetPayload().(*MausOutgoingMessage_Info); ok {
		return x.Info
	}
	return nil
}

func (x *MausOutgoingMessage) GetPidTuning() *PidTuningInfo {
	if x, ok := x.GetPayload().(*MausOutgoingMessage_PidTuning); ok {
		return x.PidTuning
	}
	return nil
}

func (x *MausOutgoingMessage) GetMazeState() *MazeStatePacket {
	if x, ok := x.GetPayload().(*MausOutgoingMessage_MazeState); ok {
		return x.MazeState
	}
	return nil
}

func (x *MausOutgoingMessage) GetMausConfig() *MausConfigPacket {
	if x, ok := x.GetPayload().(*MausOutgoingMessage_MausConfig); ok {
		return x.MausConfig
	}
	return nil
}

func (x *MausOutgoingMessage) GetMausCommandStatus() *MausCommandStatus {
	if x, ok := x.GetPayload().(*MausOutgoingMessage_MausCommandStatus); ok {
		return x.MausCommandStatus
	}
	return nil
}

type isMausOutgoingMessage_Payload interface {
	isMausOutgoingMessage_Payload()
}

type MausOutgoingMessage_Ack struct {
	Ack *AckPacket `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type MausOutgoingMessage_Nav struct {
	Nav *NavigationPacket `protobuf:"bytes,2,opt,name=nav,proto3,oneof"`
}

type MausOutgoingMessage_Pong struct {
	Pong *PongPacket `protobuf:"bytes,3,opt,name=pong,proto3,oneof"`
}

type MausOutgoingMessage_Info struct {
	Info *InfoPacket `protobuf:"bytes,4,opt,name=info,proto3,oneof"`
}

type MausOutgoingMessage_PidTuning struct {
	PidTuning *PidTuningInfo `protobuf:"bytes,5,opt,name=pidTuning,proto3,oneof"`
}

type MausOutgoingMessage_MazeState struct {
	MazeState *MazeStatePacket `protobuf:"bytes,6,opt,name=mazeState,proto3,oneof"`
}

type MausOutgoingMessage_MausConfig struct {
	MausConfig *MausConfigPacket `protobuf:"bytes,7,opt,name=mausConfig,proto3,oneof"`
}

type MausOutgoingMessage_MausCommandStatus struct {
	MausCommandStatus *MausCommandStatus `protobuf:"bytes,8,opt,name=mausCommandStatus,proto3,oneof"`
}

func (*MausOutgoingMessage_Ack) isMausOutgoingMessage_Payload() {}

func (*MausOutgoingMessage_Nav) isMausOutgoingMessage_Payload() {}

func (*MausOutgoingMessage_Pong) isMausOutgoingMessage_Payload() {}

func (*MausOutgoingMessage_Info) isMausOutgoingMessage_Payload() {}

func (*MausOutgoingMessage_PidTuning) isMausOutgoingMessage_Payload() {}

func (*MausOutgoingMessage_MazeState) isMausOutgoingMessage_Payload() {}

func (*MausOutgoingMessage_MausConfig) isMausOutgoingMessage_Payload() {}

func (*MausOutgoingMessage_MausCommandStatus) isMausOutgoingMessage_Payload() {}

// command indicates remote client connection
type MsgInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *MsgInit) Reset() {
	*x = MsgInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgInit) ProtoMessage() {}

func (x *MsgInit) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgInit.ProtoReflect.Descriptor instead.
func (*MsgInit) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

func (x *MsgInit) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type MsgPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgPing) Reset() {
	*x = MsgPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPing) ProtoMessage() {}

func (x *MsgPing) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPing.ProtoReflect.Descriptor instead.
func (*MsgPing) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

type MsgControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction float32 `protobuf:"fixed32,1,opt,name=direction,proto3" json:"direction,omitempty"`
	Speed     int32   `protobuf:"varint,2,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *MsgControl) Reset() {
	*x = MsgControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgControl) ProtoMessage() {}

func (x *MsgControl) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgControl.ProtoReflect.Descriptor instead.
func (*MsgControl) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

func (x *MsgControl) GetDirection() float32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *MsgControl) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type MsgDrive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  DriveCmdType `protobuf:"varint,1,opt,name=type,proto3,enum=DriveCmdType" json:"type,omitempty"`
	Value float32      `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Speed float32      `protobuf:"fixed32,3,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *MsgDrive) Reset() {
	*x = MsgDrive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDrive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDrive) ProtoMessage() {}

func (x *MsgDrive) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDrive.ProtoReflect.Descriptor instead.
func (*MsgDrive) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{17}
}

func (x *MsgDrive) GetType() DriveCmdType {
	if x != nil {
		return x.Type
	}
	return DriveCmdType_Move
}

func (x *MsgDrive) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MsgDrive) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type MsgSolve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  SolveCmdType `protobuf:"varint,1,opt,name=type,proto3,enum=SolveCmdType" json:"type,omitempty"`
	Speed float32      `protobuf:"fixed32,2,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *MsgSolve) Reset() {
	*x = MsgSolve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSolve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSolve) ProtoMessage() {}

func (x *MsgSolve) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSolve.ProtoReflect.Descriptor instead.
func (*MsgSolve) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{18}
}

func (x *MsgSolve) GetType() SolveCmdType {
	if x != nil {
		return x.Type
	}
	return SolveCmdType_Explore
}

func (x *MsgSolve) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type MsgSetPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y       float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Heading float32 `protobuf:"fixed32,3,opt,name=heading,proto3" json:"heading,omitempty"`
}

func (x *MsgSetPosition) Reset() {
	*x = MsgSetPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSetPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSetPosition) ProtoMessage() {}

func (x *MsgSetPosition) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSetPosition.ProtoReflect.Descriptor instead.
func (*MsgSetPosition) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{19}
}

func (x *MsgSetPosition) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MsgSetPosition) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MsgSetPosition) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

type MsgStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgStop) Reset() {
	*x = MsgStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgStop) ProtoMessage() {}

func (x *MsgStop) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgStop.ProtoReflect.Descriptor instead.
func (*MsgStop) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{20}
}

type MausIncomingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*MausIncomingMessage_Init
	//	*MausIncomingMessage_Control
	//	*MausIncomingMessage_MotorCalibration
	//	*MausIncomingMessage_Ping
	//	*MausIncomingMessage_Stop
	//	*MausIncomingMessage_Drive
	//	*MausIncomingMessage_SetPosition
	//	*MausIncomingMessage_Solve
	//	*MausIncomingMessage_LaneCalibration
	Payload isMausIncomingMessage_Payload `protobuf_oneof:"payload"`
}

func (x *MausIncomingMessage) Reset() {
	*x = MausIncomingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MausIncomingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MausIncomingMessage) ProtoMessage() {}

func (x *MausIncomingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MausIncomingMessage.ProtoReflect.Descriptor instead.
func (*MausIncomingMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{21}
}

func (m *MausIncomingMessage) GetPayload() isMausIncomingMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *MausIncomingMessage) GetInit() *MsgInit {
	if x, ok := x.GetPayload().(*MausIncomingMessage_Init); ok {
		return x.Init
	}
	return nil
}

func (x *MausIncomingMessage) GetControl() *MsgControl {
	if x, ok := x.GetPayload().(*MausIncomingMessage_Control); ok {
		return x.Control
	}
	return nil
}

func (x *MausIncomingMessage) GetMotorCalibration() *MsgMotorCalibration {
	if x, ok := x.GetPayload().(*MausIncomingMessage_MotorCalibration); ok {
		return x.MotorCalibration
	}
	return nil
}

func (x *MausIncomingMessage) GetPing() *MsgPing {
	if x, ok := x.GetPayload().(*MausIncomingMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *MausIncomingMessage) GetStop() *MsgStop {
	if x, ok := x.GetPayload().(*MausIncomingMessage_Stop); ok {
		return x.Stop
	}
	return nil
}

func (x *MausIncomingMessage) GetDrive() *MsgDrive {
	if x, ok := x.GetPayload().(*MausIncomingMessage_Drive); ok {
		return x.Drive
	}
	return nil
}

func (x *MausIncomingMessage) GetSetPosition() *MsgSetPosition {
	if x, ok := x.GetPayload().(*MausIncomingMessage_SetPosition); ok {
		return x.SetPosition
	}
	return nil
}

func (x *MausIncomingMessage) GetSolve() *MsgSolve {
	if x, ok := x.GetPayload().(*MausIncomingMessage_Solve); ok {
		return x.Solve
	}
	return nil
}

func (x *MausIncomingMessage) GetLaneCalibration() *MsgEncoderCalibration {
	if x, ok := x.GetPayload().(*MausIncomingMessage_LaneCalibration); ok {
		return x.LaneCalibration
	}
	return nil
}

type isMausIncomingMessage_Payload interface {
	isMausIncomingMessage_Payload()
}

type MausIncomingMessage_Init struct {
	Init *MsgInit `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type MausIncomingMessage_Control struct {
	Control *MsgControl `protobuf:"bytes,3,opt,name=control,proto3,oneof"`
}

type MausIncomingMessage_MotorCalibration struct {
	MotorCalibration *MsgMotorCalibration `protobuf:"bytes,4,opt,name=motorCalibration,proto3,oneof"`
}

type MausIncomingMessage_Ping struct {
	Ping *MsgPing `protobuf:"bytes,5,opt,name=ping,proto3,oneof"`
}

type MausIncomingMessage_Stop struct {
	Stop *MsgStop `protobuf:"bytes,6,opt,name=stop,proto3,oneof"`
}

type MausIncomingMessage_Drive struct {
	Drive *MsgDrive `protobuf:"bytes,7,opt,name=drive,proto3,oneof"`
}

type MausIncomingMessage_SetPosition struct {
	SetPosition *MsgSetPosition `protobuf:"bytes,8,opt,name=setPosition,proto3,oneof"`
}

type MausIncomingMessage_Solve struct {
	Solve *MsgSolve `protobuf:"bytes,9,opt,name=solve,proto3,oneof"`
}

type MausIncomingMessage_LaneCalibration struct {
	LaneCalibration *MsgEncoderCalibration `protobuf:"bytes,10,opt,name=laneCalibration,proto3,oneof"`
}

func (*MausIncomingMessage_Init) isMausIncomingMessage_Payload() {}

func (*MausIncomingMessage_Control) isMausIncomingMessage_Payload() {}

func (*MausIncomingMessage_MotorCalibration) isMausIncomingMessage_Payload() {}

func (*MausIncomingMessage_Ping) isMausIncomingMessage_Payload() {}

func (*MausIncomingMessage_Stop) isMausIncomingMessage_Payload() {}

func (*MausIncomingMessage_Drive) isMausIncomingMessage_Payload() {}

func (*MausIncomingMessage_SetPosition) isMausIncomingMessage_Payload() {}

func (*MausIncomingMessage_Solve) isMausIncomingMessage_Payload() {}

func (*MausIncomingMessage_LaneCalibration) isMausIncomingMessage_Payload() {}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x0b, 0x0a, 0x09, 0x41, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x6d,
	0x0a, 0x14, 0x4d, 0x73, 0x67, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x73, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x68, 0x0a,
	0x16, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x50, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x02, 0x6b, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x49, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x02, 0x6b, 0x49, 0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x02, 0x6b, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x6f, 0x6e, 0x67, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x4e, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x0c, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x61,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x64, 0x22, 0xa8, 0x03, 0x0a, 0x10, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65,
	0x66, 0x74, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x74, 0x6f, 0x72,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x50, 0x6f, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x70, 0x6f, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2c, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x21,
	0x0a, 0x0d, 0x50, 0x69, 0x64, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x77, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x10,
	0x4d, 0x61, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x50, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x50, 0x69, 0x64, 0x12, 0x3d, 0x0a,
	0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x50, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x50, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x07,
	0x6c, 0x61, 0x6e, 0x65, 0x50, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x4d, 0x73, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x69, 0x64, 0x22,
	0x7e, 0x0a, 0x11, 0x4d, 0x61, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x22,
	0x88, 0x03, 0x0a, 0x13, 0x4d, 0x61, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x03, 0x6e, 0x61, 0x76, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x61, 0x76, 0x12, 0x21,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50,
	0x6f, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x69, 0x64, 0x54, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x69, 0x64, 0x54, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x70, 0x69, 0x64, 0x54, 0x75,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x09, 0x6d, 0x61, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x61, 0x7a, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x7a,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x61, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x61, 0x75,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x6d, 0x61, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x11, 0x6d,
	0x61, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x61, 0x75, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61,
	0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x23, 0x0a, 0x07, 0x4d, 0x73,
	0x67, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x09, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x40, 0x0a, 0x0a, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x08,
	0x4d, 0x73, 0x67, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6d,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x43, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x0e,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x09, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x22,
	0xb2, 0x03, 0x0a, 0x13, 0x4d, 0x61, 0x75, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x45, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73,
	0x67, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x48,
	0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x05, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x64, 0x72, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x73, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2a, 0x24, 0x0a, 0x0d, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x2a, 0x4f, 0x0a, 0x0b, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6f,
	0x70, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x61, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x61, 0x75, 0x73, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x66, 0x2a, 0xa0, 0x01, 0x0a, 0x0c,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x6f, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x75, 0x72, 0x6e, 0x41, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x4c, 0x65, 0x66,
	0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x75, 0x72, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x4f, 0x6e,
	0x53, 0x70, 0x6f, 0x74, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x6e, 0x53, 0x70, 0x6f, 0x74, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x7a, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x08, 0x2a, 0x34,
	0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x6f, 0x48, 0x6f, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x10, 0x02, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_message_proto_goTypes = []interface{}{
	(MotorPosition)(0),             // 0: MotorPosition
	(InfoCmdType)(0),               // 1: InfoCmdType
	(DriveCmdType)(0),              // 2: DriveCmdType
	(SolveCmdType)(0),              // 3: SolveCmdType
	(*AckPacket)(nil),              // 4: AckPacket
	(*Position)(nil),               // 5: Position
	(*MsgMotorCalibration)(nil),   // 6: MsgMotorCalibration
	(*MsgEncoderCalibration)(nil), // 7: MsgEncoderCalibration
	(*PongPacket)(nil),             // 8: PongPacket
	(*SensorPacket)(nil),           // 9: SensorPacket
	(*PosDistribution)(nil),        // 10: PosDistribution
	(*NavigationPacket)(nil),       // 11: NavigationPacket
	(*InfoPacket)(nil),             // 12: InfoPacket
	(*PidTuningInfo)(nil),          // 13: PidTuningInfo
	(*MazeStatePacket)(nil),        // 14: MazeStatePacket
	(*MausConfigPacket)(nil),       // 15: MausConfigPacket
	(*MausCommandStatus)(nil),      // 16: MausCommandStatus
	(*MausOutgoingMessage)(nil),    // 17: MausOutgoingMessage
	(*MsgInit)(nil),                // 18: MsgInit
	(*MsgPing)(nil),                // 19: MsgPing
	(*MsgControl)(nil),             // 20: MsgControl
	(*MsgDrive)(nil),               // 21: MsgDrive
	(*MsgSolve)(nil),               // 22: MsgSolve
	(*MsgSetPosition)(nil),         // 23: MsgSetPosition
	(*MsgStop)(nil),                // 24: MsgStop
	(*MausIncomingMessage)(nil),    // 25: MausIncomingMessage
}
var file_message_proto_depIdxs = []int32{
	0,  // 0: MsgMotorCalibration.motor:type_name -> MotorPosition
	7,  // 1: MsgMotorCalibration.config:type_name -> MsgEncoderCalibration
	9,  // 2: NavigationPacket.sensors:type_name -> SensorPacket
	5,  // 3: NavigationPacket.position:type_name -> Position
	10, // 4: NavigationPacket.posDistribution:type_name -> PosDistribution
	1,  // 5: InfoPacket.cmd:type_name -> InfoCmdType
	5,  // 6: MazeStatePacket.position:type_name -> Position
	5,  // 7: MazeStatePacket.target:type_name -> Position
	7,  // 8: MausConfigPacket.leftMotorPid:type_name -> MsgEncoderCalibration
	7,  // 9: MausConfigPacket.rightMotorPid:type_name -> MsgEncoderCalibration
	7,  // 10: MausConfigPacket.lanePid:type_name -> MsgEncoderCalibration
	2,  // 11: MausCommandStatus.cmd:type_name -> DriveCmdType
	4,  // 12: MausOutgoingMessage.ack:type_name -> AckPacket
	11, // 13: MausOutgoingMessage.nav:type_name -> NavigationPacket
	8,  // 14: MausOutgoingMessage.pong:type_name -> PongPacket
	12, // 15: MausOutgoingMessage.info:type_name -> InfoPacket
	13, // 16: MausOutgoingMessage.pidTuning:type_name -> PidTuningInfo
	14, // 17: MausOutgoingMessage.mazeState:type_name -> MazeStatePacket
	15, // 18: MausOutgoingMessage.mausConfig:type_name -> MausConfigPacket
	16, // 19: MausOutgoingMessage.mausCommandStatus:type_name -> MausCommandStatus
	2,  // 20: MsgDrive.type:type_name -> DriveCmdType
	3,  // 21: MsgSolve.type:type_name -> SolveCmdType
	18, // 22: MausIncomingMessage.init:type_name -> MsgInit
	20, // 23: MausIncomingMessage.control:type_name -> MsgControl
	6,  // 24: MausIncomingMessage.motorCalibration:type_name -> MsgMotorCalibration
	19, // 25: MausIncomingMessage.ping:type_name -> MsgPing
	24, // 26: MausIncomingMessage.stop:type_name -> MsgStop
	21, // 27: MausIncomingMessage.drive:type_name -> MsgDrive
	23, // 28: MausIncomingMessage.setPosition:type_name -> MsgSetPosition
	22, // 29: MausIncomingMessage.solve:type_name -> MsgSolve
	7,  // 30: MausIncomingMessage.laneCalibration:type_name -> MsgEncoderCalibration
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgMotorCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgEncoderCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PongPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PidTuningInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MazeStatePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MausConfigPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MausCommandStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MausOutgoingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDrive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSolve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSetPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MausIncomingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MausOutgoingMessage_Ack)(nil),
		(*MausOutgoingMessage_Nav)(nil),
		(*MausOutgoingMessage_Pong)(nil),
		(*MausOutgoingMessage_Info)(nil),
		(*MausOutgoingMessage_PidTuning)(nil),
		(*MausOutgoingMessage_MazeState)(nil),
		(*MausOutgoingMessage_MausConfig)(nil),
		(*MausOutgoingMessage_MausCommandStatus)(nil),
	}
	file_message_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*MausIncomingMessage_Init)(nil),
		(*MausIncomingMessage_Control)(nil),
		(*MausIncomingMessage_MotorCalibration)(nil),
		(*MausIncomingMessage_Ping)(nil),
		(*MausIncomingMessage_Stop)(nil),
		(*MausIncomingMessage_Drive)(nil),
		(*MausIncomingMessage_SetPosition)(nil),
		(*MausIncomingMessage_Solve)(nil),
		(*MausIncomingMessage_LaneCalibration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
